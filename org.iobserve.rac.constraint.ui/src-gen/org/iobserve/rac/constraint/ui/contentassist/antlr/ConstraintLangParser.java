/*
* generated by Xtext
*/
package org.iobserve.rac.constraint.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.iobserve.rac.constraint.services.ConstraintLangGrammarAccess;

public class ConstraintLangParser extends AbstractContentAssistParser {
	
	@Inject
	private ConstraintLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.iobserve.rac.constraint.ui.contentassist.antlr.internal.InternalConstraintLangParser createParser() {
		org.iobserve.rac.constraint.ui.contentassist.antlr.internal.InternalConstraintLangParser result = new org.iobserve.rac.constraint.ui.contentassist.antlr.internal.InternalConstraintLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getBasicSelectConstraintAccess().getAlternatives(), "rule__BasicSelectConstraint__Alternatives");
					put(grammarAccess.getCompareOperandAccess().getAlternatives(), "rule__CompareOperand__Alternatives");
					put(grammarAccess.getBasicConstraintAccess().getAlternatives(), "rule__BasicConstraint__Alternatives");
					put(grammarAccess.getBasicPropertyConstraintAccess().getAlternatives(), "rule__BasicPropertyConstraint__Alternatives");
					put(grammarAccess.getTypeSelectionAccess().getAlternatives(), "rule__TypeSelection__Alternatives");
					put(grammarAccess.getSourceReferenceAccess().getAlternatives_1(), "rule__SourceReference__Alternatives_1");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getRecordTypeModifierAccess().getAlternatives(), "rule__RecordTypeModifier__Alternatives");
					put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
					put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getSelectionAccess().getGroup(), "rule__Selection__Group__0");
					put(grammarAccess.getSelectionAccess().getGroup_5(), "rule__Selection__Group_5__0");
					put(grammarAccess.getSelectionAccess().getGroup_10(), "rule__Selection__Group_10__0");
					put(grammarAccess.getSelectInputAccess().getGroup(), "rule__SelectInput__Group__0");
					put(grammarAccess.getSelectInputAccess().getGroup_2(), "rule__SelectInput__Group_2__0");
					put(grammarAccess.getSelectConstaintExpressionAccess().getGroup(), "rule__SelectConstaintExpression__Group__0");
					put(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1(), "rule__SelectConstaintExpression__Group_1__0");
					put(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0(), "rule__SelectConstaintExpression__Group_1_0__0");
					put(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0_0(), "rule__SelectConstaintExpression__Group_1_0_0__0");
					put(grammarAccess.getParenthesisSelectConstraintAccess().getGroup(), "rule__ParenthesisSelectConstraint__Group__0");
					put(grammarAccess.getSelectConstraintAccess().getGroup(), "rule__SelectConstraint__Group__0");
					put(grammarAccess.getParameterExpressionAccess().getGroup(), "rule__ParameterExpression__Group__0");
					put(grammarAccess.getParameterExpressionAccess().getGroup_0(), "rule__ParameterExpression__Group_0__0");
					put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
					put(grammarAccess.getConstraintExpressionAccess().getGroup(), "rule__ConstraintExpression__Group__0");
					put(grammarAccess.getConstraintExpressionAccess().getGroup_1(), "rule__ConstraintExpression__Group_1__0");
					put(grammarAccess.getConstraintExpressionAccess().getGroup_1_0(), "rule__ConstraintExpression__Group_1_0__0");
					put(grammarAccess.getConstraintExpressionAccess().getGroup_1_0_0(), "rule__ConstraintExpression__Group_1_0_0__0");
					put(grammarAccess.getParenthesisConstraintAccess().getGroup(), "rule__ParenthesisConstraint__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getPropertyConstraintAccess().getGroup(), "rule__PropertyConstraint__Group__0");
					put(grammarAccess.getPropertyConstraintAccess().getGroup_1(), "rule__PropertyConstraint__Group_1__0");
					put(grammarAccess.getPropertyConstraintAccess().getGroup_1_0(), "rule__PropertyConstraint__Group_1_0__0");
					put(grammarAccess.getPropertyConstraintAccess().getGroup_1_0_0(), "rule__PropertyConstraint__Group_1_0_0__0");
					put(grammarAccess.getPropertyParenthesisConstraintAccess().getGroup(), "rule__PropertyParenthesisConstraint__Group__0");
					put(grammarAccess.getPropertyValueConstraintAccess().getGroup(), "rule__PropertyValueConstraint__Group__0");
					put(grammarAccess.getTemplateTypeSelectionAccess().getGroup(), "rule__TemplateTypeSelection__Group__0");
					put(grammarAccess.getTemplateTypeSelectionAccess().getGroup_3(), "rule__TemplateTypeSelection__Group_3__0");
					put(grammarAccess.getRecordTypeSelectionAccess().getGroup(), "rule__RecordTypeSelection__Group__0");
					put(grammarAccess.getSourceReferenceAccess().getGroup(), "rule__SourceReference__Group__0");
					put(grammarAccess.getArrayLiteralAccess().getGroup(), "rule__ArrayLiteral__Group__0");
					put(grammarAccess.getArrayLiteralAccess().getGroup_2(), "rule__ArrayLiteral__Group_2__0");
					put(grammarAccess.getBuiltInValueLiteralAccess().getGroup(), "rule__BuiltInValueLiteral__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_2(), "rule__Model__ImportsAssignment_2");
					put(grammarAccess.getModelAccess().getOperationsAssignment_3(), "rule__Model__OperationsAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSelectionAccess().getNameAssignment_1(), "rule__Selection__NameAssignment_1");
					put(grammarAccess.getSelectionAccess().getSourceReferenceAssignment_2(), "rule__Selection__SourceReferenceAssignment_2");
					put(grammarAccess.getSelectionAccess().getInputsAssignment_4(), "rule__Selection__InputsAssignment_4");
					put(grammarAccess.getSelectionAccess().getInputsAssignment_5_1(), "rule__Selection__InputsAssignment_5_1");
					put(grammarAccess.getSelectionAccess().getRecordTypeAssignment_7(), "rule__Selection__RecordTypeAssignment_7");
					put(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_9(), "rule__Selection__ParemterExpressionsAssignment_9");
					put(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_10_1(), "rule__Selection__ParemterExpressionsAssignment_10_1");
					put(grammarAccess.getSelectInputAccess().getRecordTypeAssignment_0(), "rule__SelectInput__RecordTypeAssignment_0");
					put(grammarAccess.getSelectInputAccess().getNameAssignment_1(), "rule__SelectInput__NameAssignment_1");
					put(grammarAccess.getSelectInputAccess().getSelectConstraintAssignment_2_1(), "rule__SelectInput__SelectConstraintAssignment_2_1");
					put(grammarAccess.getSelectConstaintExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__SelectConstaintExpression__OperatorAssignment_1_0_0_1");
					put(grammarAccess.getSelectConstaintExpressionAccess().getRightAssignment_1_1(), "rule__SelectConstaintExpression__RightAssignment_1_1");
					put(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintAssignment_1(), "rule__ParenthesisSelectConstraint__ConstraintAssignment_1");
					put(grammarAccess.getSelectConstraintAccess().getLeftAssignment_0(), "rule__SelectConstraint__LeftAssignment_0");
					put(grammarAccess.getSelectConstraintAccess().getComperatorAssignment_1(), "rule__SelectConstraint__ComperatorAssignment_1");
					put(grammarAccess.getSelectConstraintAccess().getRightAssignment_2(), "rule__SelectConstraint__RightAssignment_2");
					put(grammarAccess.getParameterExpressionAccess().getInputAssignment_0_0(), "rule__ParameterExpression__InputAssignment_0_0");
					put(grammarAccess.getParameterExpressionAccess().getPropertyReferenceAssignment_1(), "rule__ParameterExpression__PropertyReferenceAssignment_1");
					put(grammarAccess.getFilterAccess().getNameAssignment_1(), "rule__Filter__NameAssignment_1");
					put(grammarAccess.getFilterAccess().getSourceReferenceAssignment_2(), "rule__Filter__SourceReferenceAssignment_2");
					put(grammarAccess.getFilterAccess().getConstraintAssignment_3(), "rule__Filter__ConstraintAssignment_3");
					put(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__ConstraintExpression__OperatorAssignment_1_0_0_1");
					put(grammarAccess.getConstraintExpressionAccess().getRightAssignment_1_1(), "rule__ConstraintExpression__RightAssignment_1_1");
					put(grammarAccess.getParenthesisConstraintAccess().getConstraintAssignment_1(), "rule__ParenthesisConstraint__ConstraintAssignment_1");
					put(grammarAccess.getConstraintAccess().getTypeSelectionAssignment_0(), "rule__Constraint__TypeSelectionAssignment_0");
					put(grammarAccess.getConstraintAccess().getPropertyConstraintAssignment_1(), "rule__Constraint__PropertyConstraintAssignment_1");
					put(grammarAccess.getPropertyConstraintAccess().getOperatorAssignment_1_0_0_1(), "rule__PropertyConstraint__OperatorAssignment_1_0_0_1");
					put(grammarAccess.getPropertyConstraintAccess().getRightAssignment_1_1(), "rule__PropertyConstraint__RightAssignment_1_1");
					put(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintAssignment_1(), "rule__PropertyParenthesisConstraint__ConstraintAssignment_1");
					put(grammarAccess.getPropertyValueConstraintAccess().getPropertyAssignment_0(), "rule__PropertyValueConstraint__PropertyAssignment_0");
					put(grammarAccess.getPropertyValueConstraintAccess().getComparatorAssignment_1(), "rule__PropertyValueConstraint__ComparatorAssignment_1");
					put(grammarAccess.getPropertyValueConstraintAccess().getValueAssignment_2(), "rule__PropertyValueConstraint__ValueAssignment_2");
					put(grammarAccess.getConcreteTypeAccess().getTypeAssignment(), "rule__ConcreteType__TypeAssignment");
					put(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_2(), "rule__TemplateTypeSelection__TypesAssignment_2");
					put(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_3_1(), "rule__TemplateTypeSelection__TypesAssignment_3_1");
					put(grammarAccess.getRecordTypeSelectionAccess().getModifierAssignment_1(), "rule__RecordTypeSelection__ModifierAssignment_1");
					put(grammarAccess.getRecordTypeSelectionAccess().getTypeAssignment_2(), "rule__RecordTypeSelection__TypeAssignment_2");
					put(grammarAccess.getSourceReferenceAccess().getFilterAssignment_1_0(), "rule__SourceReference__FilterAssignment_1_0");
					put(grammarAccess.getSourceReferenceAccess().getDefaultAssignment_1_1(), "rule__SourceReference__DefaultAssignment_1_1");
					put(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1(), "rule__ArrayLiteral__LiteralsAssignment_1");
					put(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1(), "rule__ArrayLiteral__LiteralsAssignment_2_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getFloatLiteralAccess().getValueAssignment(), "rule__FloatLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getBuiltInValueLiteralAccess().getValueAssignment_1(), "rule__BuiltInValueLiteral__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.iobserve.rac.constraint.ui.contentassist.antlr.internal.InternalConstraintLangParser typedParser = (org.iobserve.rac.constraint.ui.contentassist.antlr.internal.InternalConstraintLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConstraintLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConstraintLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
