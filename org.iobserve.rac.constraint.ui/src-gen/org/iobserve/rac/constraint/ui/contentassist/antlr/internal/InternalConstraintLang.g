/*
* generated by Xtext
*/
grammar InternalConstraintLang;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.iobserve.rac.constraint.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.iobserve.rac.constraint.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.iobserve.rac.constraint.services.ConstraintLangGrammarAccess;

}

@parser::members {
 
 	private ConstraintLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ConstraintLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getAlternatives()); }
(rule__Operation__Alternatives)
{ after(grammarAccess.getOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelection
entryRuleSelection 
:
{ before(grammarAccess.getSelectionRule()); }
	 ruleSelection
{ after(grammarAccess.getSelectionRule()); } 
	 EOF 
;

// Rule Selection
ruleSelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectionAccess().getGroup()); }
(rule__Selection__Group__0)
{ after(grammarAccess.getSelectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectInput
entryRuleSelectInput 
:
{ before(grammarAccess.getSelectInputRule()); }
	 ruleSelectInput
{ after(grammarAccess.getSelectInputRule()); } 
	 EOF 
;

// Rule SelectInput
ruleSelectInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectInputAccess().getGroup()); }
(rule__SelectInput__Group__0)
{ after(grammarAccess.getSelectInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectConstaintExpression
entryRuleSelectConstaintExpression 
:
{ before(grammarAccess.getSelectConstaintExpressionRule()); }
	 ruleSelectConstaintExpression
{ after(grammarAccess.getSelectConstaintExpressionRule()); } 
	 EOF 
;

// Rule SelectConstaintExpression
ruleSelectConstaintExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getGroup()); }
(rule__SelectConstaintExpression__Group__0)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicSelectConstraint
entryRuleBasicSelectConstraint 
:
{ before(grammarAccess.getBasicSelectConstraintRule()); }
	 ruleBasicSelectConstraint
{ after(grammarAccess.getBasicSelectConstraintRule()); } 
	 EOF 
;

// Rule BasicSelectConstraint
ruleBasicSelectConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicSelectConstraintAccess().getAlternatives()); }
(rule__BasicSelectConstraint__Alternatives)
{ after(grammarAccess.getBasicSelectConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesisSelectConstraint
entryRuleParenthesisSelectConstraint 
:
{ before(grammarAccess.getParenthesisSelectConstraintRule()); }
	 ruleParenthesisSelectConstraint
{ after(grammarAccess.getParenthesisSelectConstraintRule()); } 
	 EOF 
;

// Rule ParenthesisSelectConstraint
ruleParenthesisSelectConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisSelectConstraintAccess().getGroup()); }
(rule__ParenthesisSelectConstraint__Group__0)
{ after(grammarAccess.getParenthesisSelectConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectConstraint
entryRuleSelectConstraint 
:
{ before(grammarAccess.getSelectConstraintRule()); }
	 ruleSelectConstraint
{ after(grammarAccess.getSelectConstraintRule()); } 
	 EOF 
;

// Rule SelectConstraint
ruleSelectConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectConstraintAccess().getGroup()); }
(rule__SelectConstraint__Group__0)
{ after(grammarAccess.getSelectConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperand
entryRuleCompareOperand 
:
{ before(grammarAccess.getCompareOperandRule()); }
	 ruleCompareOperand
{ after(grammarAccess.getCompareOperandRule()); } 
	 EOF 
;

// Rule CompareOperand
ruleCompareOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperandAccess().getAlternatives()); }
(rule__CompareOperand__Alternatives)
{ after(grammarAccess.getCompareOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterExpression
entryRuleParameterExpression 
:
{ before(grammarAccess.getParameterExpressionRule()); }
	 ruleParameterExpression
{ after(grammarAccess.getParameterExpressionRule()); } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterExpressionAccess().getGroup()); }
(rule__ParameterExpression__Group__0)
{ after(grammarAccess.getParameterExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilter
entryRuleFilter 
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilterAccess().getGroup()); }
(rule__Filter__Group__0)
{ after(grammarAccess.getFilterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression 
:
{ before(grammarAccess.getConstraintExpressionRule()); }
	 ruleConstraintExpression
{ after(grammarAccess.getConstraintExpressionRule()); } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup()); }
(rule__ConstraintExpression__Group__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicConstraint
entryRuleBasicConstraint 
:
{ before(grammarAccess.getBasicConstraintRule()); }
	 ruleBasicConstraint
{ after(grammarAccess.getBasicConstraintRule()); } 
	 EOF 
;

// Rule BasicConstraint
ruleBasicConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicConstraintAccess().getAlternatives()); }
(rule__BasicConstraint__Alternatives)
{ after(grammarAccess.getBasicConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesisConstraint
entryRuleParenthesisConstraint 
:
{ before(grammarAccess.getParenthesisConstraintRule()); }
	 ruleParenthesisConstraint
{ after(grammarAccess.getParenthesisConstraintRule()); } 
	 EOF 
;

// Rule ParenthesisConstraint
ruleParenthesisConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getGroup()); }
(rule__ParenthesisConstraint__Group__0)
{ after(grammarAccess.getParenthesisConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getGroup()); }
(rule__Constraint__Group__0)
{ after(grammarAccess.getConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyConstraint
entryRulePropertyConstraint 
:
{ before(grammarAccess.getPropertyConstraintRule()); }
	 rulePropertyConstraint
{ after(grammarAccess.getPropertyConstraintRule()); } 
	 EOF 
;

// Rule PropertyConstraint
rulePropertyConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyConstraintAccess().getGroup()); }
(rule__PropertyConstraint__Group__0)
{ after(grammarAccess.getPropertyConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicPropertyConstraint
entryRuleBasicPropertyConstraint 
:
{ before(grammarAccess.getBasicPropertyConstraintRule()); }
	 ruleBasicPropertyConstraint
{ after(grammarAccess.getBasicPropertyConstraintRule()); } 
	 EOF 
;

// Rule BasicPropertyConstraint
ruleBasicPropertyConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicPropertyConstraintAccess().getAlternatives()); }
(rule__BasicPropertyConstraint__Alternatives)
{ after(grammarAccess.getBasicPropertyConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyParenthesisConstraint
entryRulePropertyParenthesisConstraint 
:
{ before(grammarAccess.getPropertyParenthesisConstraintRule()); }
	 rulePropertyParenthesisConstraint
{ after(grammarAccess.getPropertyParenthesisConstraintRule()); } 
	 EOF 
;

// Rule PropertyParenthesisConstraint
rulePropertyParenthesisConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyParenthesisConstraintAccess().getGroup()); }
(rule__PropertyParenthesisConstraint__Group__0)
{ after(grammarAccess.getPropertyParenthesisConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyValueConstraint
entryRulePropertyValueConstraint 
:
{ before(grammarAccess.getPropertyValueConstraintRule()); }
	 rulePropertyValueConstraint
{ after(grammarAccess.getPropertyValueConstraintRule()); } 
	 EOF 
;

// Rule PropertyValueConstraint
rulePropertyValueConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getGroup()); }
(rule__PropertyValueConstraint__Group__0)
{ after(grammarAccess.getPropertyValueConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSelection
entryRuleTypeSelection 
:
{ before(grammarAccess.getTypeSelectionRule()); }
	 ruleTypeSelection
{ after(grammarAccess.getTypeSelectionRule()); } 
	 EOF 
;

// Rule TypeSelection
ruleTypeSelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSelectionAccess().getAlternatives()); }
(rule__TypeSelection__Alternatives)
{ after(grammarAccess.getTypeSelectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteType
entryRuleConcreteType 
:
{ before(grammarAccess.getConcreteTypeRule()); }
	 ruleConcreteType
{ after(grammarAccess.getConcreteTypeRule()); } 
	 EOF 
;

// Rule ConcreteType
ruleConcreteType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteTypeAccess().getTypeAssignment()); }
(rule__ConcreteType__TypeAssignment)
{ after(grammarAccess.getConcreteTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateTypeSelection
entryRuleTemplateTypeSelection 
:
{ before(grammarAccess.getTemplateTypeSelectionRule()); }
	 ruleTemplateTypeSelection
{ after(grammarAccess.getTemplateTypeSelectionRule()); } 
	 EOF 
;

// Rule TemplateTypeSelection
ruleTemplateTypeSelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getGroup()); }
(rule__TemplateTypeSelection__Group__0)
{ after(grammarAccess.getTemplateTypeSelectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordTypeSelection
entryRuleRecordTypeSelection 
:
{ before(grammarAccess.getRecordTypeSelectionRule()); }
	 ruleRecordTypeSelection
{ after(grammarAccess.getRecordTypeSelectionRule()); } 
	 EOF 
;

// Rule RecordTypeSelection
ruleRecordTypeSelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getGroup()); }
(rule__RecordTypeSelection__Group__0)
{ after(grammarAccess.getRecordTypeSelectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral 
:
{ before(grammarAccess.getArrayLiteralRule()); }
	 ruleArrayLiteral
{ after(grammarAccess.getArrayLiteralRule()); } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup()); }
(rule__ArrayLiteral__Group__0)
{ after(grammarAccess.getArrayLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
(rule__IntLiteral__ValueAssignment)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
(rule__FloatLiteral__ValueAssignment)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltInValueLiteral
entryRuleBuiltInValueLiteral 
:
{ before(grammarAccess.getBuiltInValueLiteralRule()); }
	 ruleBuiltInValueLiteral
{ after(grammarAccess.getBuiltInValueLiteralRule()); } 
	 EOF 
;

// Rule BuiltInValueLiteral
ruleBuiltInValueLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltInValueLiteralAccess().getGroup()); }
(rule__BuiltInValueLiteral__Group__0)
{ after(grammarAccess.getBuiltInValueLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule RecordTypeModifier
ruleRecordTypeModifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeModifierAccess().getAlternatives()); }
(rule__RecordTypeModifier__Alternatives)
{ after(grammarAccess.getRecordTypeModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicOperator
ruleLogicOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
(rule__LogicOperator__Alternatives)
{ after(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Comparator
ruleComparator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparatorAccess().getAlternatives()); }
(rule__Comparator__Alternatives)
{ after(grammarAccess.getComparatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Operation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getFilterParserRuleCall_0()); }
	ruleFilter
{ after(grammarAccess.getOperationAccess().getFilterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getSelectionParserRuleCall_1()); }
	ruleSelection
{ after(grammarAccess.getOperationAccess().getSelectionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicSelectConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicSelectConstraintAccess().getParenthesisSelectConstraintParserRuleCall_0()); }
	ruleParenthesisSelectConstraint
{ after(grammarAccess.getBasicSelectConstraintAccess().getParenthesisSelectConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicSelectConstraintAccess().getSelectConstraintParserRuleCall_1()); }
	ruleSelectConstraint
{ after(grammarAccess.getBasicSelectConstraintAccess().getSelectConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperandAccess().getParameterExpressionParserRuleCall_0()); }
	ruleParameterExpression
{ after(grammarAccess.getCompareOperandAccess().getParameterExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompareOperandAccess().getLiteralParserRuleCall_1()); }
	ruleLiteral
{ after(grammarAccess.getCompareOperandAccess().getLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); }
	ruleParenthesisConstraint
{ after(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicConstraintAccess().getConstraintParserRuleCall_1()); }
	ruleConstraint
{ after(grammarAccess.getBasicConstraintAccess().getConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPropertyConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPropertyConstraintAccess().getPropertyParenthesisConstraintParserRuleCall_0()); }
	rulePropertyParenthesisConstraint
{ after(grammarAccess.getBasicPropertyConstraintAccess().getPropertyParenthesisConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicPropertyConstraintAccess().getPropertyValueConstraintParserRuleCall_1()); }
	rulePropertyValueConstraint
{ after(grammarAccess.getBasicPropertyConstraintAccess().getPropertyValueConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectionAccess().getConcreteTypeParserRuleCall_0()); }
	ruleConcreteType
{ after(grammarAccess.getTypeSelectionAccess().getConcreteTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeSelectionAccess().getTemplateTypeSelectionParserRuleCall_1()); }
	ruleTemplateTypeSelection
{ after(grammarAccess.getTypeSelectionAccess().getTemplateTypeSelectionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeSelectionAccess().getRecordTypeSelectionParserRuleCall_2()); }
	ruleRecordTypeSelection
{ after(grammarAccess.getTypeSelectionAccess().getRecordTypeSelectionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
	ruleIntLiteral
{ after(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); }
	ruleArrayLiteral
{ after(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBuiltInValueLiteralParserRuleCall_5()); }
	ruleBuiltInValueLiteral
{ after(grammarAccess.getLiteralAccess().getBuiltInValueLiteralParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeModifierAccess().getSUPEREnumLiteralDeclaration_0()); }
(	'super' 
)
{ after(grammarAccess.getRecordTypeModifierAccess().getSUPEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRecordTypeModifierAccess().getEXTENDSEnumLiteralDeclaration_1()); }
(	'extends' 
)
{ after(grammarAccess.getRecordTypeModifierAccess().getEXTENDSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
(	'&' 
)
{ after(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
(	'|' 
)
{ after(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3()); }
(	'<' 
)
{ after(grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5()); }
(	'<=' 
)
{ after(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6()); }
(	'~' 
)
{ after(grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
(rule__Model__NameAssignment_1)
{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_2()); }
(rule__Model__ImportsAssignment_2)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOperationsAssignment_3()); }
(rule__Model__OperationsAssignment_3)*
{ after(grammarAccess.getModelAccess().getOperationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Selection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__0__Impl
	rule__Selection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getSelectKeyword_0()); }

	'select' 

{ after(grammarAccess.getSelectionAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__1__Impl
	rule__Selection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getInputsAssignment_1()); }
(rule__Selection__InputsAssignment_1)
{ after(grammarAccess.getSelectionAccess().getInputsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__2__Impl
	rule__Selection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getGroup_2()); }
(rule__Selection__Group_2__0)*
{ after(grammarAccess.getSelectionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__3__Impl
	rule__Selection__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getFromKeyword_3()); }

	'from' 

{ after(grammarAccess.getSelectionAccess().getFromKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__4__Impl
	rule__Selection__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getFilterAssignment_4()); }
(rule__Selection__FilterAssignment_4)
{ after(grammarAccess.getSelectionAccess().getFilterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__5__Impl
	rule__Selection__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getStoreKeyword_5()); }

	'store' 

{ after(grammarAccess.getSelectionAccess().getStoreKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__6__Impl
	rule__Selection__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getRecordTypeAssignment_6()); }
(rule__Selection__RecordTypeAssignment_6)
{ after(grammarAccess.getSelectionAccess().getRecordTypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__7__Impl
	rule__Selection__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getLeftParenthesisKeyword_7()); }

	'(' 

{ after(grammarAccess.getSelectionAccess().getLeftParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__8__Impl
	rule__Selection__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_8()); }
(rule__Selection__ParemterExpressionsAssignment_8)
{ after(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__9__Impl
	rule__Selection__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getGroup_9()); }
(rule__Selection__Group_9__0)*
{ after(grammarAccess.getSelectionAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getRightParenthesisKeyword_10()); }

	')' 

{ after(grammarAccess.getSelectionAccess().getRightParenthesisKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__Selection__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group_2__0__Impl
	rule__Selection__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getSelectionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getInputsAssignment_2_1()); }
(rule__Selection__InputsAssignment_2_1)
{ after(grammarAccess.getSelectionAccess().getInputsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Selection__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group_9__0__Impl
	rule__Selection__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getCommaKeyword_9_0()); }

	',' 

{ after(grammarAccess.getSelectionAccess().getCommaKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_9_1()); }
(rule__Selection__ParemterExpressionsAssignment_9_1)
{ after(grammarAccess.getSelectionAccess().getParemterExpressionsAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectInput__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectInput__Group__0__Impl
	rule__SelectInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getRecordTypeAssignment_0()); }
(rule__SelectInput__RecordTypeAssignment_0)
{ after(grammarAccess.getSelectInputAccess().getRecordTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectInput__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectInput__Group__1__Impl
	rule__SelectInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getNameAssignment_1()); }
(rule__SelectInput__NameAssignment_1)
{ after(grammarAccess.getSelectInputAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectInput__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectInput__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getGroup_2()); }
(rule__SelectInput__Group_2__0)?
{ after(grammarAccess.getSelectInputAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectInput__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectInput__Group_2__0__Impl
	rule__SelectInput__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getSelectInputAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectInput__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectInput__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getSelectConstraintAssignment_2_1()); }
(rule__SelectInput__SelectConstraintAssignment_2_1)
{ after(grammarAccess.getSelectInputAccess().getSelectConstraintAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectConstaintExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group__0__Impl
	rule__SelectConstaintExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getBasicSelectConstraintParserRuleCall_0()); }
	ruleBasicSelectConstraint
{ after(grammarAccess.getSelectConstaintExpressionAccess().getBasicSelectConstraintParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstaintExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1()); }
(rule__SelectConstaintExpression__Group_1__0)?
{ after(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectConstaintExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group_1__0__Impl
	rule__SelectConstaintExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0()); }
(rule__SelectConstaintExpression__Group_1_0__0)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstaintExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getRightAssignment_1_1()); }
(rule__SelectConstaintExpression__RightAssignment_1_1)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectConstaintExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0_0()); }
(rule__SelectConstaintExpression__Group_1_0_0__0)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SelectConstaintExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group_1_0_0__0__Impl
	rule__SelectConstaintExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getSelectConstaintExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getSelectConstaintExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstaintExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstaintExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__SelectConstaintExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getSelectConstaintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesisSelectConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisSelectConstraint__Group__0__Impl
	rule__ParenthesisSelectConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisSelectConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisSelectConstraintAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesisSelectConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisSelectConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisSelectConstraint__Group__1__Impl
	rule__ParenthesisSelectConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisSelectConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintAssignment_1()); }
(rule__ParenthesisSelectConstraint__ConstraintAssignment_1)
{ after(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisSelectConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisSelectConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisSelectConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisSelectConstraintAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesisSelectConstraintAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstraint__Group__0__Impl
	rule__SelectConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getLeftAssignment_0()); }
(rule__SelectConstraint__LeftAssignment_0)
{ after(grammarAccess.getSelectConstraintAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstraint__Group__1__Impl
	rule__SelectConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getComperatorAssignment_1()); }
(rule__SelectConstraint__ComperatorAssignment_1)
{ after(grammarAccess.getSelectConstraintAccess().getComperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getRightAssignment_2()); }
(rule__SelectConstraint__RightAssignment_2)
{ after(grammarAccess.getSelectConstraintAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group__0__Impl
	rule__ParameterExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getGroup_0()); }
(rule__ParameterExpression__Group_0__0)?
{ after(grammarAccess.getParameterExpressionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getPropertyReferenceAssignment_1()); }
(rule__ParameterExpression__PropertyReferenceAssignment_1)
{ after(grammarAccess.getParameterExpressionAccess().getPropertyReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_0__0__Impl
	rule__ParameterExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getInputAssignment_0_0()); }
(rule__ParameterExpression__InputAssignment_0_0)
{ after(grammarAccess.getParameterExpressionAccess().getInputAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getParameterExpressionAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Filter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Filter__Group__0__Impl
	rule__Filter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterAccess().getFilterKeyword_0()); }

	'filter' 

{ after(grammarAccess.getFilterAccess().getFilterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Filter__Group__1__Impl
	rule__Filter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterAccess().getNameAssignment_1()); }
(rule__Filter__NameAssignment_1)
{ after(grammarAccess.getFilterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Filter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterAccess().getConstraintAssignment_2()); }
(rule__Filter__ConstraintAssignment_2)
{ after(grammarAccess.getFilterAccess().getConstraintAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstraintExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__0__Impl
	rule__ConstraintExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getBasicConstraintParserRuleCall_0()); }
	ruleBasicConstraint
{ after(grammarAccess.getConstraintExpressionAccess().getBasicConstraintParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1()); }
(rule__ConstraintExpression__Group_1__0)?
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstraintExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1__0__Impl
	rule__ConstraintExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1_0()); }
(rule__ConstraintExpression__Group_1_0__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightAssignment_1_1()); }
(rule__ConstraintExpression__RightAssignment_1_1)
{ after(grammarAccess.getConstraintExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstraintExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1_0_0()); }
(rule__ConstraintExpression__Group_1_0_0__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConstraintExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0_0__0__Impl
	rule__ConstraintExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__ConstraintExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesisConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__0__Impl
	rule__ParenthesisConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__1__Impl
	rule__ParenthesisConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getConstraintAssignment_1()); }
(rule__ParenthesisConstraint__ConstraintAssignment_1)
{ after(grammarAccess.getParenthesisConstraintAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Constraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getTypeSelectionAssignment_0()); }
(rule__Constraint__TypeSelectionAssignment_0)
{ after(grammarAccess.getConstraintAccess().getTypeSelectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getPropertyConstraintAssignment_1()); }
(rule__Constraint__PropertyConstraintAssignment_1)?
{ after(grammarAccess.getConstraintAccess().getPropertyConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group__0__Impl
	rule__PropertyConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getBasicPropertyConstraintParserRuleCall_0()); }
	ruleBasicPropertyConstraint
{ after(grammarAccess.getPropertyConstraintAccess().getBasicPropertyConstraintParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getGroup_1()); }
(rule__PropertyConstraint__Group_1__0)?
{ after(grammarAccess.getPropertyConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group_1__0__Impl
	rule__PropertyConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getGroup_1_0()); }
(rule__PropertyConstraint__Group_1_0__0)
{ after(grammarAccess.getPropertyConstraintAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getRightAssignment_1_1()); }
(rule__PropertyConstraint__RightAssignment_1_1)
{ after(grammarAccess.getPropertyConstraintAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyConstraint__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getGroup_1_0_0()); }
(rule__PropertyConstraint__Group_1_0_0__0)
{ after(grammarAccess.getPropertyConstraintAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PropertyConstraint__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group_1_0_0__0__Impl
	rule__PropertyConstraint__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getPropertyConstraintLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getPropertyConstraintAccess().getPropertyConstraintLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyConstraint__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyConstraint__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getOperatorAssignment_1_0_0_1()); }
(rule__PropertyConstraint__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getPropertyConstraintAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyParenthesisConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyParenthesisConstraint__Group__0__Impl
	rule__PropertyParenthesisConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyParenthesisConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getPropertyParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyParenthesisConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyParenthesisConstraint__Group__1__Impl
	rule__PropertyParenthesisConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyParenthesisConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintAssignment_1()); }
(rule__PropertyParenthesisConstraint__ConstraintAssignment_1)
{ after(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyParenthesisConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyParenthesisConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyParenthesisConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getPropertyParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyValueConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValueConstraint__Group__0__Impl
	rule__PropertyValueConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getPropertyAssignment_0()); }
(rule__PropertyValueConstraint__PropertyAssignment_0)
{ after(grammarAccess.getPropertyValueConstraintAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValueConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValueConstraint__Group__1__Impl
	rule__PropertyValueConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getComparatorAssignment_1()); }
(rule__PropertyValueConstraint__ComparatorAssignment_1)
{ after(grammarAccess.getPropertyValueConstraintAccess().getComparatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyValueConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyValueConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getValueAssignment_2()); }
(rule__PropertyValueConstraint__ValueAssignment_2)
{ after(grammarAccess.getPropertyValueConstraintAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemplateTypeSelection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group__0__Impl
	rule__TemplateTypeSelection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getTemplateTypeSelectionAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateTypeSelection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group__1__Impl
	rule__TemplateTypeSelection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getUsesKeyword_1()); }

	'uses' 

{ after(grammarAccess.getTemplateTypeSelectionAccess().getUsesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateTypeSelection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group__2__Impl
	rule__TemplateTypeSelection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_2()); }
(rule__TemplateTypeSelection__TypesAssignment_2)
{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateTypeSelection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getGroup_3()); }
(rule__TemplateTypeSelection__Group_3__0)*
{ after(grammarAccess.getTemplateTypeSelectionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemplateTypeSelection__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group_3__0__Impl
	rule__TemplateTypeSelection__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getTemplateTypeSelectionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateTypeSelection__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateTypeSelection__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_3_1()); }
(rule__TemplateTypeSelection__TypesAssignment_3_1)
{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordTypeSelection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeSelection__Group__0__Impl
	rule__RecordTypeSelection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeSelection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getRecordTypeSelectionAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeSelection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeSelection__Group__1__Impl
	rule__RecordTypeSelection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeSelection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getModifierAssignment_1()); }
(rule__RecordTypeSelection__ModifierAssignment_1)
{ after(grammarAccess.getRecordTypeSelectionAccess().getModifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeSelection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeSelection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeSelection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getTypeAssignment_2()); }
(rule__RecordTypeSelection__TypeAssignment_2)
{ after(grammarAccess.getRecordTypeSelectionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__0__Impl
	rule__ArrayLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__1__Impl
	rule__ArrayLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1()); }
(rule__ArrayLiteral__LiteralsAssignment_1)
{ after(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__2__Impl
	rule__ArrayLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup_2()); }
(rule__ArrayLiteral__Group_2__0)*
{ after(grammarAccess.getArrayLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_2__0__Impl
	rule__ArrayLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1()); }
(rule__ArrayLiteral__LiteralsAssignment_2_1)
{ after(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BuiltInValueLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInValueLiteral__Group__0__Impl
	rule__BuiltInValueLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInValueLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInValueLiteralAccess().getBuiltInValueLiteralAction_0()); }
(

)
{ after(grammarAccess.getBuiltInValueLiteralAccess().getBuiltInValueLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInValueLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInValueLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInValueLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInValueLiteralAccess().getValueAssignment_1()); }
(rule__BuiltInValueLiteral__ValueAssignment_1)
{ after(grammarAccess.getBuiltInValueLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildcard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__0__Impl
	rule__QualifiedNameWithWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ImportsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__OperationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOperationsOperationParserRuleCall_3_0()); }
	ruleOperation{ after(grammarAccess.getModelAccess().getOperationsOperationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__InputsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_1_0()); }
	ruleSelectInput{ after(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__InputsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_2_1_0()); }
	ruleSelectInput{ after(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__FilterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getFilterFilterCrossReference_4_0()); }
(
{ before(grammarAccess.getSelectionAccess().getFilterFilterIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getSelectionAccess().getFilterFilterIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getSelectionAccess().getFilterFilterCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__RecordTypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getRecordTypeRecordTypeCrossReference_6_0()); }
(
{ before(grammarAccess.getSelectionAccess().getRecordTypeRecordTypeIDTerminalRuleCall_6_0_1()); }
	RULE_ID{ after(grammarAccess.getSelectionAccess().getRecordTypeRecordTypeIDTerminalRuleCall_6_0_1()); }
)
{ after(grammarAccess.getSelectionAccess().getRecordTypeRecordTypeCrossReference_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__ParemterExpressionsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_8_0()); }
	ruleParameterExpression{ after(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__ParemterExpressionsAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_9_1_0()); }
	ruleParameterExpression{ after(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__RecordTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getRecordTypeRecordTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getSelectInputAccess().getRecordTypeRecordTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSelectInputAccess().getRecordTypeRecordTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSelectInputAccess().getRecordTypeRecordTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSelectInputAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectInput__SelectConstraintAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectInputAccess().getSelectConstraintSelectConstaintExpressionParserRuleCall_2_1_0()); }
	ruleSelectConstaintExpression{ after(grammarAccess.getSelectInputAccess().getSelectConstraintSelectConstaintExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getSelectConstaintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstaintExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstaintExpressionAccess().getRightSelectConstaintExpressionParserRuleCall_1_1_0()); }
	ruleSelectConstaintExpression{ after(grammarAccess.getSelectConstaintExpressionAccess().getRightSelectConstaintExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisSelectConstraint__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintSelectConstaintExpressionParserRuleCall_1_0()); }
	ruleSelectConstaintExpression{ after(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintSelectConstaintExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getLeftCompareOperandParserRuleCall_0_0()); }
	ruleCompareOperand{ after(grammarAccess.getSelectConstraintAccess().getLeftCompareOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__ComperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getComperatorComparatorEnumRuleCall_1_0()); }
	ruleComparator{ after(grammarAccess.getSelectConstraintAccess().getComperatorComparatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectConstraint__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectConstraintAccess().getRightCompareOperandParserRuleCall_2_0()); }
	ruleCompareOperand{ after(grammarAccess.getSelectConstraintAccess().getRightCompareOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__InputAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getInputSelectInputCrossReference_0_0_0()); }
(
{ before(grammarAccess.getParameterExpressionAccess().getInputSelectInputIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterExpressionAccess().getInputSelectInputIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getParameterExpressionAccess().getInputSelectInputCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterExpression__PropertyReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterExpressionAccess().getPropertyReferencePropertyCrossReference_1_0()); }
(
{ before(grammarAccess.getParameterExpressionAccess().getPropertyReferencePropertyIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getParameterExpressionAccess().getPropertyReferencePropertyIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getParameterExpressionAccess().getPropertyReferencePropertyCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFilterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__ConstraintAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFilterAccess().getConstraintConstraintExpressionParserRuleCall_2_0()); }
	ruleConstraintExpression{ after(grammarAccess.getFilterAccess().getConstraintConstraintExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); }
	rulePropertyConstraint{ after(grammarAccess.getConstraintExpressionAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__TypeSelectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getTypeSelectionTypeSelectionParserRuleCall_0_0()); }
	ruleTypeSelection{ after(grammarAccess.getConstraintAccess().getTypeSelectionTypeSelectionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__PropertyConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getPropertyConstraintPropertyConstraintParserRuleCall_1_0()); }
	rulePropertyConstraint{ after(grammarAccess.getConstraintAccess().getPropertyConstraintPropertyConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getPropertyConstraintAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyConstraint__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyConstraintAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); }
	rulePropertyConstraint{ after(grammarAccess.getPropertyConstraintAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyParenthesisConstraint__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintPropertyConstraintParserRuleCall_1_0()); }
	rulePropertyConstraint{ after(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintPropertyConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getPropertyPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getPropertyPropertyIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyValueConstraintAccess().getPropertyPropertyIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPropertyValueConstraintAccess().getPropertyPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__ComparatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getComparatorComparatorEnumRuleCall_1_0()); }
	ruleComparator{ after(grammarAccess.getPropertyValueConstraintAccess().getComparatorComparatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyValueConstraint__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyValueConstraintAccess().getValueLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getPropertyValueConstraintAccess().getValueLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteTypeAccess().getTypeTypeCrossReference_0()); }
(
{ before(grammarAccess.getConcreteTypeAccess().getTypeTypeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getConcreteTypeAccess().getTypeTypeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getConcreteTypeAccess().getTypeTypeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__TypesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateTypeSelection__TypesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_3_1_0()); }
(
{ before(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeQualifiedNameParserRuleCall_3_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeQualifiedNameParserRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeSelection__ModifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getModifierRecordTypeModifierEnumRuleCall_1_0()); }
	ruleRecordTypeModifier{ after(grammarAccess.getRecordTypeSelectionAccess().getModifierRecordTypeModifierEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeSelection__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getTypeRecordTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getRecordTypeSelectionAccess().getTypeRecordTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getRecordTypeSelectionAccess().getTypeRecordTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getRecordTypeSelectionAccess().getTypeRecordTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__LiteralsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__LiteralsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); }
	ruleLiteral{ after(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInValueLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInValueLiteralAccess().getValueKIEKER_VERSIONKeyword_1_0()); }
(
{ before(grammarAccess.getBuiltInValueLiteralAccess().getValueKIEKER_VERSIONKeyword_1_0()); }

	'KIEKER_VERSION' 

{ after(grammarAccess.getBuiltInValueLiteralAccess().getValueKIEKER_VERSIONKeyword_1_0()); }
)

{ after(grammarAccess.getBuiltInValueLiteralAccess().getValueKIEKER_VERSIONKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_NUMBER : '0'..'9';

RULE_INT : '-'? RULE_NUMBER+;

RULE_FLOAT : ('-'? RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|'-'? RULE_NUMBER+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


