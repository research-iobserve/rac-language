/*
* generated by Xtext
*/
grammar InternalConstraintLang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.iobserve.rac.constraint.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.iobserve.rac.constraint.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.iobserve.rac.constraint.services.ConstraintLangGrammarAccess;

}

@parser::members {

 	private ConstraintLangGrammarAccess grammarAccess;
 	
    public InternalConstraintLangParser(TokenStream input, ConstraintLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ConstraintLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getOperationsOperationParserRuleCall_3_0()); 
	    }
		lv_operations_3_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_3_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getFilterParserRuleCall_0()); 
    }
    this_Filter_0=ruleFilter
    { 
        $current = $this_Filter_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getSelectionParserRuleCall_1()); 
    }
    this_Selection_1=ruleSelection
    { 
        $current = $this_Selection_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	 iv_ruleSelection=ruleSelection 
	 { $current=$iv_ruleSelection.current; } 
	 EOF 
;

// Rule Selection
ruleSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionAccess().getSelectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSelectionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getSourceReferenceSourceReferenceParserRuleCall_2_0()); 
	    }
		lv_sourceReference_2_0=ruleSourceReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		set(
       			$current, 
       			"sourceReference",
        		lv_sourceReference_2_0, 
        		"SourceReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectionAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_4_0()); 
	    }
		lv_inputs_4_0=ruleSelectInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_4_0, 
        		"SelectInput");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getInputsSelectInputParserRuleCall_5_1_0()); 
	    }
		lv_inputs_6_0=ruleSelectInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_6_0, 
        		"SelectInput");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='store' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSelectionAccess().getStoreKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getSelectionAccess().getRecordTypeRecordTypeCrossReference_7_0()); 
	}

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSelectionAccess().getLeftParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_9_0()); 
	    }
		lv_paremterExpressions_10_0=ruleParameterExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"paremterExpressions",
        		lv_paremterExpressions_10_0, 
        		"ParameterExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSelectionAccess().getCommaKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getParemterExpressionsParameterExpressionParserRuleCall_10_1_0()); 
	    }
		lv_paremterExpressions_12_0=ruleParameterExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"paremterExpressions",
        		lv_paremterExpressions_12_0, 
        		"ParameterExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getSelectionAccess().getRightParenthesisKeyword_11());
    }
)
;





// Entry rule entryRuleSelectInput
entryRuleSelectInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectInputRule()); }
	 iv_ruleSelectInput=ruleSelectInput 
	 { $current=$iv_ruleSelectInput.current; } 
	 EOF 
;

// Rule SelectInput
ruleSelectInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectInputRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSelectInputAccess().getRecordTypeRecordTypeCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSelectInputAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectInputAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectInputAccess().getSelectConstraintSelectConstaintExpressionParserRuleCall_2_1_0()); 
	    }
		lv_selectConstraint_3_0=ruleSelectConstaintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectInputRule());
	        }
       		set(
       			$current, 
       			"selectConstraint",
        		lv_selectConstraint_3_0, 
        		"SelectConstaintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSelectConstaintExpression
entryRuleSelectConstaintExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectConstaintExpressionRule()); }
	 iv_ruleSelectConstaintExpression=ruleSelectConstaintExpression 
	 { $current=$iv_ruleSelectConstaintExpression.current; } 
	 EOF 
;

// Rule SelectConstaintExpression
ruleSelectConstaintExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSelectConstaintExpressionAccess().getBasicSelectConstraintParserRuleCall_0()); 
    }
    this_BasicSelectConstraint_0=ruleBasicSelectConstraint
    { 
        $current = $this_BasicSelectConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleLogicOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSelectConstaintExpressionAccess().getSelectConstaintExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstaintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstaintExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstaintExpressionAccess().getRightSelectConstaintExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleSelectConstaintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstaintExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SelectConstaintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicSelectConstraint
entryRuleBasicSelectConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicSelectConstraintRule()); }
	 iv_ruleBasicSelectConstraint=ruleBasicSelectConstraint 
	 { $current=$iv_ruleBasicSelectConstraint.current; } 
	 EOF 
;

// Rule BasicSelectConstraint
ruleBasicSelectConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicSelectConstraintAccess().getParenthesisSelectConstraintParserRuleCall_0()); 
    }
    this_ParenthesisSelectConstraint_0=ruleParenthesisSelectConstraint
    { 
        $current = $this_ParenthesisSelectConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicSelectConstraintAccess().getSelectConstraintParserRuleCall_1()); 
    }
    this_SelectConstraint_1=ruleSelectConstraint
    { 
        $current = $this_SelectConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisSelectConstraint
entryRuleParenthesisSelectConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisSelectConstraintRule()); }
	 iv_ruleParenthesisSelectConstraint=ruleParenthesisSelectConstraint 
	 { $current=$iv_ruleParenthesisSelectConstraint.current; } 
	 EOF 
;

// Rule ParenthesisSelectConstraint
ruleParenthesisSelectConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisSelectConstraintAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisSelectConstraintAccess().getConstraintSelectConstaintExpressionParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleSelectConstaintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisSelectConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"SelectConstaintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisSelectConstraintAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleSelectConstraint
entryRuleSelectConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectConstraintRule()); }
	 iv_ruleSelectConstraint=ruleSelectConstraint 
	 { $current=$iv_ruleSelectConstraint.current; } 
	 EOF 
;

// Rule SelectConstraint
ruleSelectConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstraintAccess().getLeftCompareOperandParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleCompareOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstraintRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"CompareOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstraintAccess().getComperatorComparatorEnumRuleCall_1_0()); 
	    }
		lv_comperator_1_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstraintRule());
	        }
       		set(
       			$current, 
       			"comperator",
        		lv_comperator_1_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectConstraintAccess().getRightCompareOperandParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleCompareOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectConstraintRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"CompareOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompareOperand
entryRuleCompareOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperandRule()); }
	 iv_ruleCompareOperand=ruleCompareOperand 
	 { $current=$iv_ruleCompareOperand.current; } 
	 EOF 
;

// Rule CompareOperand
ruleCompareOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareOperandAccess().getParameterExpressionParserRuleCall_0()); 
    }
    this_ParameterExpression_0=ruleParameterExpression
    { 
        $current = $this_ParameterExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompareOperandAccess().getLiteralParserRuleCall_1()); 
    }
    this_Literal_1=ruleLiteral
    { 
        $current = $this_Literal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameterExpression
entryRuleParameterExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterExpressionRule()); }
	 iv_ruleParameterExpression=ruleParameterExpression 
	 { $current=$iv_ruleParameterExpression.current; } 
	 EOF 
;

// Rule ParameterExpression
ruleParameterExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParameterExpressionAccess().getInputSelectInputCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterExpressionAccess().getFullStopKeyword_0_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParameterExpressionAccess().getPropertyReferencePropertyCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	 iv_ruleFilter=ruleFilter 
	 { $current=$iv_ruleFilter.current; } 
	 EOF 
;

// Rule Filter
ruleFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='filter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFilterAccess().getFilterKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFilterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFilterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterAccess().getSourceReferenceSourceReferenceParserRuleCall_2_0()); 
	    }
		lv_sourceReference_2_0=ruleSourceReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterRule());
	        }
       		set(
       			$current, 
       			"sourceReference",
        		lv_sourceReference_2_0, 
        		"SourceReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterAccess().getConstraintConstraintExpressionParserRuleCall_3_0()); 
	    }
		lv_constraint_3_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintExpressionRule()); }
	 iv_ruleConstraintExpression=ruleConstraintExpression 
	 { $current=$iv_ruleConstraintExpression.current; } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getBasicConstraintParserRuleCall_0()); 
    }
    this_BasicConstraint_0=ruleBasicConstraint
    { 
        $current = $this_BasicConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleLogicOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePropertyConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PropertyConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicConstraint
entryRuleBasicConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicConstraintRule()); }
	 iv_ruleBasicConstraint=ruleBasicConstraint 
	 { $current=$iv_ruleBasicConstraint.current; } 
	 EOF 
;

// Rule BasicConstraint
ruleBasicConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); 
    }
    this_ParenthesisConstraint_0=ruleParenthesisConstraint
    { 
        $current = $this_ParenthesisConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicConstraintAccess().getConstraintParserRuleCall_1()); 
    }
    this_Constraint_1=ruleConstraint
    { 
        $current = $this_Constraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisConstraint
entryRuleParenthesisConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisConstraintRule()); }
	 iv_ruleParenthesisConstraint=ruleParenthesisConstraint 
	 { $current=$iv_ruleParenthesisConstraint.current; } 
	 EOF 
;

// Rule ParenthesisConstraint
ruleParenthesisConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getTypeSelectionTypeSelectionParserRuleCall_0_0()); 
	    }
		lv_typeSelection_0_0=ruleTypeSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"typeSelection",
        		lv_typeSelection_0_0, 
        		"TypeSelection");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getPropertyConstraintPropertyConstraintParserRuleCall_1_0()); 
	    }
		lv_propertyConstraint_1_0=rulePropertyConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"propertyConstraint",
        		lv_propertyConstraint_1_0, 
        		"PropertyConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePropertyConstraint
entryRulePropertyConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyConstraintRule()); }
	 iv_rulePropertyConstraint=rulePropertyConstraint 
	 { $current=$iv_rulePropertyConstraint.current; } 
	 EOF 
;

// Rule PropertyConstraint
rulePropertyConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyConstraintAccess().getBasicPropertyConstraintParserRuleCall_0()); 
    }
    this_BasicPropertyConstraint_0=ruleBasicPropertyConstraint
    { 
        $current = $this_BasicPropertyConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleLogicOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPropertyConstraintAccess().getPropertyConstraintLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConstraintAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConstraintRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyConstraintAccess().getRightPropertyConstraintParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePropertyConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyConstraintRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PropertyConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicPropertyConstraint
entryRuleBasicPropertyConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicPropertyConstraintRule()); }
	 iv_ruleBasicPropertyConstraint=ruleBasicPropertyConstraint 
	 { $current=$iv_ruleBasicPropertyConstraint.current; } 
	 EOF 
;

// Rule BasicPropertyConstraint
ruleBasicPropertyConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicPropertyConstraintAccess().getPropertyParenthesisConstraintParserRuleCall_0()); 
    }
    this_PropertyParenthesisConstraint_0=rulePropertyParenthesisConstraint
    { 
        $current = $this_PropertyParenthesisConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicPropertyConstraintAccess().getPropertyValueConstraintParserRuleCall_1()); 
    }
    this_PropertyValueConstraint_1=rulePropertyValueConstraint
    { 
        $current = $this_PropertyValueConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePropertyParenthesisConstraint
entryRulePropertyParenthesisConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyParenthesisConstraintRule()); }
	 iv_rulePropertyParenthesisConstraint=rulePropertyParenthesisConstraint 
	 { $current=$iv_rulePropertyParenthesisConstraint.current; } 
	 EOF 
;

// Rule PropertyParenthesisConstraint
rulePropertyParenthesisConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyParenthesisConstraintAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyParenthesisConstraintAccess().getConstraintPropertyConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=rulePropertyConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyParenthesisConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"PropertyConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyParenthesisConstraintAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRulePropertyValueConstraint
entryRulePropertyValueConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyValueConstraintRule()); }
	 iv_rulePropertyValueConstraint=rulePropertyValueConstraint 
	 { $current=$iv_rulePropertyValueConstraint.current; } 
	 EOF 
;

// Rule PropertyValueConstraint
rulePropertyValueConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyValueConstraintRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPropertyValueConstraintAccess().getPropertyPropertyCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueConstraintAccess().getComparatorComparatorEnumRuleCall_1_0()); 
	    }
		lv_comparator_1_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueConstraintRule());
	        }
       		set(
       			$current, 
       			"comparator",
        		lv_comparator_1_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueConstraintAccess().getValueLiteralParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueConstraintRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeSelection
entryRuleTypeSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSelectionRule()); }
	 iv_ruleTypeSelection=ruleTypeSelection 
	 { $current=$iv_ruleTypeSelection.current; } 
	 EOF 
;

// Rule TypeSelection
ruleTypeSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeSelectionAccess().getConcreteTypeParserRuleCall_0()); 
    }
    this_ConcreteType_0=ruleConcreteType
    { 
        $current = $this_ConcreteType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSelectionAccess().getTemplateTypeSelectionParserRuleCall_1()); 
    }
    this_TemplateTypeSelection_1=ruleTemplateTypeSelection
    { 
        $current = $this_TemplateTypeSelection_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSelectionAccess().getRecordTypeSelectionParserRuleCall_2()); 
    }
    this_RecordTypeSelection_2=ruleRecordTypeSelection
    { 
        $current = $this_RecordTypeSelection_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConcreteType
entryRuleConcreteType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcreteTypeRule()); }
	 iv_ruleConcreteType=ruleConcreteType 
	 { $current=$iv_ruleConcreteType.current; } 
	 EOF 
;

// Rule ConcreteType
ruleConcreteType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConcreteTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConcreteTypeAccess().getTypeTypeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTemplateTypeSelection
entryRuleTemplateTypeSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateTypeSelectionRule()); }
	 iv_ruleTemplateTypeSelection=ruleTemplateTypeSelection 
	 { $current=$iv_ruleTemplateTypeSelection.current; } 
	 EOF 
;

// Rule TemplateTypeSelection
ruleTemplateTypeSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemplateTypeSelectionAccess().getQuestionMarkKeyword_0());
    }
	otherlv_1='uses' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemplateTypeSelectionAccess().getUsesKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateTypeSelectionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_2_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTemplateTypeSelectionAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateTypeSelectionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTemplateTypeSelectionAccess().getTypesTemplateTypeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRecordTypeSelection
entryRuleRecordTypeSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTypeSelectionRule()); }
	 iv_ruleRecordTypeSelection=ruleRecordTypeSelection 
	 { $current=$iv_ruleRecordTypeSelection.current; } 
	 EOF 
;

// Rule RecordTypeSelection
ruleRecordTypeSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTypeSelectionAccess().getQuestionMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeSelectionAccess().getModifierRecordTypeModifierEnumRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleRecordTypeModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeSelectionRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"RecordTypeModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordTypeSelectionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRecordTypeSelectionAccess().getTypeRecordTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleSourceReference
entryRuleSourceReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourceReferenceRule()); }
	 iv_ruleSourceReference=ruleSourceReference 
	 { $current=$iv_ruleSourceReference.current; } 
	 EOF 
;

// Rule SourceReference
ruleSourceReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='from' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSourceReferenceAccess().getFromKeyword_0());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSourceReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSourceReferenceAccess().getFilterOperationCrossReference_1_0_0()); 
	}

)
)
    |(
(
		lv_default_2_0=	'default' 
    {
        newLeafNode(lv_default_2_0, grammarAccess.getSourceReferenceAccess().getDefaultDefaultKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSourceReferenceRule());
	        }
       		setWithLastConsumed($current, "default", true, "default");
	    }

)
)))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); 
    }
    this_StringLiteral_0=ruleStringLiteral
    { 
        $current = $this_StringLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); 
    }
    this_IntLiteral_1=ruleIntLiteral
    { 
        $current = $this_IntLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); 
    }
    this_FloatLiteral_2=ruleFloatLiteral
    { 
        $current = $this_FloatLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); 
    }
    this_BooleanLiteral_3=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); 
    }
    this_ArrayLiteral_4=ruleArrayLiteral
    { 
        $current = $this_ArrayLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBuiltInValueLiteralParserRuleCall_5()); 
    }
    this_BuiltInValueLiteral_5=ruleBuiltInValueLiteral
    { 
        $current = $this_BuiltInValueLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_ruleArrayLiteral=ruleArrayLiteral 
	 { $current=$iv_ruleArrayLiteral.current; } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); 
	    }
		lv_literals_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); 
	    }
		lv_literals_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleBuiltInValueLiteral
entryRuleBuiltInValueLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInValueLiteralRule()); }
	 iv_ruleBuiltInValueLiteral=ruleBuiltInValueLiteral 
	 { $current=$iv_ruleBuiltInValueLiteral.current; } 
	 EOF 
;

// Rule BuiltInValueLiteral
ruleBuiltInValueLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBuiltInValueLiteralAccess().getBuiltInValueLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=	'KIEKER_VERSION' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBuiltInValueLiteralAccess().getValueKIEKER_VERSIONKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltInValueLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "KIEKER_VERSION");
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); 
    }
)?)
    ;





// Rule RecordTypeModifier
ruleRecordTypeModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='super' 
	{
        $current = grammarAccess.getRecordTypeModifierAccess().getSUPEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRecordTypeModifierAccess().getSUPEREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='extends' 
	{
        $current = grammarAccess.getRecordTypeModifierAccess().getEXTENDSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRecordTypeModifierAccess().getEXTENDSEnumLiteralDeclaration_1()); 
    }
));



// Rule LogicOperator
ruleLogicOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='|' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
));



// Rule Comparator
ruleComparator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<' 
	{
        $current = grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<=' 
	{
        $current = grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='~' 
	{
        $current = grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6()); 
    }
));



fragment RULE_NUMBER : '0'..'9';

RULE_INT : '-'? RULE_NUMBER+;

RULE_FLOAT : ('-'? RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|'-'? RULE_NUMBER+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


